@page "/MyOrders"
@using SEP3Library.Models
@using SEP3UI.Data
@using System.Security.Claims
@inject IOrderService orderService
@inject ICustomerService customerService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager


<div class="container-fluid px-4 text-center">
    <h2 class="mt-3 mb-3">MyOrders</h2>
    @if (orders == null || !orders.Any()) {
        <h2 class="mt-3 mb-3">No items to display</h2>
    }
    else {
        <div class="row">
            <table class="table table-hover table-responsive-lg col-12" style="width: 100%">
                <thead class="thead-light">
                <tr>
                    <th scope="col">Order ID</th>
                    <th scope="col">Items</th>
                    <th scope="col">Total</th>
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Address</th>
                    <th scope="col">Status</th>
                    <th scope="col">Time</th>
                </tr>
                </thead>
                <tbody>
                @foreach (Order order in orders) {
                    <tr @onclick="@(() => View(order.Id))" class="family-row">
                        <td>@order.Id</td>
                        <td>@GetAmount(order)</td>
                        <td>@order.Total</td>
                        <td>@order.FirstName @order.LastName</td>
                        <td>@order.Email</td>
                        <td>@order.Address.ToString()</td>
                        <td>@order.OrderStatus.ToString()</td>
                        <td>@order.DateTime.ToString()</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
    <div class="text-center">
        <button class="btn btn-md btn-dark" style="@hidden" @onclick="LoadMoreAsync">Load more</button>
    </div>
</div>

@code {
    private IList<Order> orders;
    private int orderIndex;
    private string hidden;
    private Customer customer;
    private string filterStatus = "Any";
    private int filterId;

    protected override async Task OnInitializedAsync() {
        NavBarEvent.Invoke();
        customer = await customerService.GetCustomerAsync(int.Parse((await authStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue("Id")));
        orders = await orderService.GetOrdersByCustomerAsync(customer.Id, orderIndex);
        orderIndex = 0;
        hidden = "";
    }

    private async Task LoadMoreAsync() {
        orderIndex++;
        IList<Order> newList = await orderService.GetOrdersByCustomerAsync(customer.Id,orderIndex);
        if (newList.Count == 0) {
            hidden = "display: none";
            orderIndex--;
        }
        foreach (Order order in newList) {
            orders.Add(order);
        }
    }

    private int GetAmount(Order order) {
        int amount = 0;
        foreach (Item item in order.Items) {
            amount += item.Quantity;
        }
        return amount;
    }

    private void View(int orderId) {
        navigationManager.NavigateTo($"/orders/{orderId}");
    }
}