@page "/CustomerList"
@using SEP3UI.Data
@using SEP3Library.Models
@using SEP3Library.UIModels
@using SEP3UI.Authentication
@using System.Security.Claims
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject ICustomerService customerService
@inject AuthenticationStateProvider provider

<div class="container-fluid text-center">
    <h2 class="mt-3 mb-3">Customers</h2>
        @if (customers == null || !customers.Any()) {
            <h1>No customers</h1>
        }
        else {
            <table class="table table-responsive-md">
                <thead class="thead-light">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Role</th>
                    <th scope="col">Phone number</th>
                </tr>
                </thead>
                <tbody>
                @foreach (Customer customer in customers) {
                    <tr class="family-row">
                        <td>@customer.Id</td>
                        <td>@customer.FirstName @customer.LastName</td>
                        <td>@customer.Email</td>
                        <td>
                            <i class="oi oi-flag" style="@SetFlags(customer.Role)" @onclick="@(() => ChangeCustomerRoleAsync(customer))"/>
                        </td>
                        @if (customer.PhoneNumber == null) {
                            <td>No phone available</td>
                            }
                        else {
                        <td>@customer.PhoneNumber</td>
                        }
                    </tr>
                }
                </tbody>
            </table>
            <div class="text-center">
                <button class="btn btn-md btn-dark order-button" style="@loadMore" @onclick="LoadMoreAsync">Load more</button>
            </div>
            <div class="container text-center text-danger">
                <div>@errorMessage</div>
            </div>
        }
</div>

@code {
    private IList<Customer> customers;
    private int adminId;
    private UpdateCustomerModel updateCustomerModel;
    private int index;
    private string loadMore = "";
    private string role = "";
    private string errorMessage;
    
    protected override async Task OnInitializedAsync() {
        updateCustomerModel = new UpdateCustomerModel();
        index = 0;
        adminId = int.Parse((await provider.GetAuthenticationStateAsync()).User.FindFirstValue("Id"));
        customers = await customerService.GetCustomersByIndexAsync(index);
    }

    private async Task LoadMoreAsync() {
        index++;
        IList<Customer> newList = await customerService.GetCustomersByIndexAsync(index);
        if (newList.Count == 0) {
            loadMore = "display: none";
            index--;
        }
        else {
            foreach (Customer c in newList.ToList()) {
                customers.Add(c);
            }
        }
    }

    private string SetFlags(string role) {
         return role.Equals("Administrator") ? "color:red" : "color:grey";
    }

    private async Task ChangeCustomerRoleAsync(Customer customer) {
        errorMessage = "";
        if (customer.Id != adminId) {
            customer.Role = customer.Role.Equals("Administrator") ? "Customer" : "Administrator";
            updateCustomerModel.FirstName = customer.FirstName;
            updateCustomerModel.LastName = customer.LastName;
            updateCustomerModel.Email = customer.Email;
            updateCustomerModel.Number = customer.Address.Number;
            updateCustomerModel.City = customer.Address.City;
            updateCustomerModel.ZipCode = customer.Address.ZipCode;
            updateCustomerModel.Street = customer.Address.Street;
            updateCustomerModel.Role = customer.Role;
            await customerService.UpdateCustomerAsync(customer.Id,updateCustomerModel);
        }
        else {
            errorMessage = "You cannot change your own role as an admin";
        }
        
    }
    


}