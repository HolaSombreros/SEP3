@page "/ItemDetails/{id:int}"
@using SEP3UI.Data
@using System.Security.Claims
@using SEP3Library.Models
@using SEP3UI.Authentication
@inject IItemService itemService
@inject IOrderService orderService
@inject ICustomerService customerService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager

@if (item == null) {
    <h2>Loading</h2>
}
else {
    <div class="text-center mb-3">
        <h2>Item details</h2>
    </div>
    <div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="img-responsive m-3 text-center mt-5">
                <img style="max-width: 500px; object-fit: cover" src="@item.FilePath" alt="Image of @item.Name"/>
            </div>
        </div>
        <div class="col-md-6">
            <div class="pt-5 pl-5">
                <AuthorizeView>
                    <div class="text-right mr-5">
                        @if (favorite) {
                            <i class="favorite oi oi-heart" @onclick="PerformUnfavoriteAsync"></i>
                        }
                        else {
                            <i class="non-favorite oi oi-heart" @onclick="PerformFavoriteAsync"></i>
                        }
                    </div>
                </AuthorizeView>
                <h2 class="mb-4">
                    <div>@item.Name</div>
                </h2>
                <div class="text-break">
                    <strong>About:</strong>
                    @item.Description
                </div>
                <div class="mt-2">
                    <strong>Category:</strong>
                    @item.Category.Name
                </div>
                @if (item.Category.Name.Equals("Book") && book != null) {
                    <div class="mt-2">
                        <div class="d-flex">
                            <strong class="mr-2">Author: </strong>
                             <div class="d-inline-block">
                        @foreach (Author author in book.Authors) {
                           
                                <span>@author.FirstName <span class="ml-1">@author.LastName</span></span>
                                <br/>
                            
                        }</div>
                        </div>
                    </div>
                    <div class="mt-2">
                        <strong>Publication Date: </strong>@book.PublicationDate.DateToString()
                    </div>
                    <div class="mt-2">
                        <strong>Language: </strong>
                        @book.Language
                    </div>
                    <div class="mt-2">
                        <div class="d-flex">
                            <strong class="mr-2">Genre: </strong>
                             <div class="d-inline-block">
                             @foreach (Genre g in book.Genre) {
                            @g.Name
                            <br/>
                        }
                             </div>
                    </div>
                    </div>
                }
                <div class="mt-2">
                    <strong>Price: </strong> <span class="amount-old">@item.PriceIncludingDiscount DKK</span>
                    @if (item.Discount > 0) {
                        <span class="ml-2 text-danger">(@item.Discount% OFF)</span>
                    }
                </div>
                <AuthorizeView Policy=@Policies.IsAdmin>
                    <div class="mt-2">
                        <strong>Quantity: </strong> @item.Quantity
                    </div>
                </AuthorizeView>
                <div class="mt-2">
                    <strong>Status: </strong>
                    @if (item.Quantity == 0) {
                        <span class="text-danger"> Out of stock</span>
                    }
                    else {
                        <span class="text-success"> In stock</span>
                    }
                </div>
                <div class="mt-2">
                    <strong>Rating:</strong> @rating
                </div>
                <div class="mt-2">
                    <button class="btn btn-round btn-dark" disabled="@isDisabled" @onclick="(() => AddToShoppingCartAsync(item))">Add to Shopping Cart</button>
                    <AuthorizeView Policy="@Policies.IsAdmin">
                        <button class="btn btn-round btn-dark" @onclick="(() => View(item.Id, item.Category.Name))">
                            Edit Item
                        </button>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
    <div class="text-center mb-3 mt-3">
        <h2 class="mb-1">All Ratings and Reviews</h2>
    </div>
    @foreach (Review review in reviews) {
        <div class="bg-white rounded shadow-sm p-4 mb-4">
            <div class="pt-4 pb-4">
                <h5 class="mb-1">
                    <strong>@review.Customer.FirstName @review.Customer.LastName</strong>
                </h5>
                <i class="text-gray">@review.DateTime.Day/@review.DateTime.Month/@review.DateTime.Year</i>
                @if (customerId == review.Customer.Id) {
                    <a class="close" @onclick="() => RemoveReviewAsync(review.ItemId)">&#10005;</a>
                    <a class="close mr-3 oi oi-pencil" @onclick="() => ChangeToEdit()"/>
                    @if (review.Comment != null && !review.Comment.Equals("")) {
                        <div class="form-group">
                            <h5>Your comment</h5>
                            <div>@review.Comment</div>
                        </div>
                    }
                    if (isEditing) {
                        <EditForm Model="review" Context="EditYourOwnReview" OnValidSubmit="EditReviewAsync">
                            <DataAnnotationsValidator/>
                            <form>
                                <div class="form-group">
                                    <h5 class="mb-4">Edit your own comment</h5>
                                    <textarea class="form-control" @bind="@review.Comment"></textarea>
                                </div>
                                <ValidationMessage For="@(() => review.Comment)"/>
                                <h6 class="mb-2">Your rating: </h6>
                                <div class="rating">
                                    <input type="radio" name="test" id="one" checked @onclick="@(() => AddRating(1))"/>
                                    <label for="one">
                                        <i class="oi oi-star"></i>
                                    </label>
                                    @if (review.Rating >= 2) {
                                        <input type="radio" name="test" id="two" checked @onclick="@(() => AddRating(2))"/>
                                    }
                                    else {
                                        <input type="radio" name="test" id="two" @onclick="@(() => AddRating(2))"/>
                                    }
                                    <label for="two">
                                        <i class="oi oi-star"></i>
                                    </label>
                                    @if (review.Rating >= 3) {
                                        <input type="radio" name="test" id="three" checked @onclick="@(() => AddRating(3))"/>
                                    }
                                    else {
                                        <input type="radio" name="test" id="three" @onclick="@(() => AddRating(3))"/>
                                    }
                                    <label for="three">
                                        <i class="oi oi-star"></i>
                                    </label>
                                    @if (review.Rating >= 4) {
                                        <input type="radio" name="test" id="four" checked @onclick="@(() => AddRating(4))"/>
                                    }
                                    else {
                                        <input type="radio" name="test" id="four" @onclick="@(() => AddRating(4))"/>
                                    }
                                    <label for="four">
                                        <i class="oi oi-star"></i>
                                    </label>
                                    @if (review.Rating == 5) {
                                        <input type="radio" name="test" id="five" checked @onclick="@(() => AddRating(5))"/>
                                    }
                                    else {
                                        <input type="radio" name="test" id="five" @onclick="@(() => AddRating(5))"/>
                                    }
                                    <label for="five">
                                        <i class="oi oi-star"></i>
                                    </label>
                                </div>
                            </form>
                            <div class="text-center">
                                <button class="btn btn-md btn-dark order-button">Edit comment</button>
                            </div>
                        </EditForm>
                    }
                }
                else {
                    <div>
                        <p>@review.Comment</p>
                    </div>
                }
                <span class="star-rating float-right"></span>
            </div>
            @if (!isEditing) {
                @if (review.Rating != 0) {
                    <div>
                        @for (int i = 0; i < review.Rating; i++) {
                            <i class="icons oi oi-star" style="color: darkred" id="star1"></i>
                        }
                        @for (int i = 0; i < 5 - review.Rating; i++) {
                            <i class="icons oi oi-star" style="color:grey;" id="star1"></i>
                        }
                    </div>
                }
            }
        </div>
    }
    <div class="text-center">
        <button class="btn btn-round btn-dark" style="@loadMore" @onclick="LoadMoreAsync">Load more</button>
    </div>
    <div class="@show mt-3">
        <AuthorizeView>
            <EditForm Model="review" Context="addReview">
                <DataAnnotationsValidator/>
                <div class="rounded shadow-sm p-4 mb-5 container">
                    <div class="form-group">
                        <h5 class="mb-4">Leave a comment</h5>
                        <h6>Your Comment</h6>
                        <textarea class="form-control" @bind="@review.Comment"></textarea>
                    </div>
                    <ValidationMessage For="@(() => review.Comment)"/>
                    <h6 class="mb-2">Rate the item</h6>
                    <div class="rating">
                        <input type="radio" name="test" id="one" checked @onclick="@(() => AddRating(1))"/>
                        <label for="one">
                            <i class="oi oi-star"></i>
                        </label>
                        <input type="radio" name="test" id="two" @onclick="@(() => AddRating(2))"/>
                        <label for="two">
                            <i class="oi oi-star"></i>
                        </label>
                        <input type="radio" name="test" id="three" @onclick="@(() => AddRating(3))"/>
                        <label for="three">
                            <i class="oi oi-star"></i>
                        </label>
                        <input type="radio" name="test" id="four" @onclick="@(() => AddRating(4))"/>
                        <label for="four">
                            <i class="oi oi-star"></i>
                        </label>
                        <input type="radio" name="test" id="five" @onclick="@(() => AddRating(5))"/>
                        <label for="five">
                            <i class="oi oi-star"></i>
                        </label>
                    </div>
                    <br/>
                    <div class="mt-3 text-center">
                        <button class="btn btn-round btn-dark" @onclick="AddReviewAsync"> Submit Review</button>
                    </div>
                </div>
            </EditForm>
        </AuthorizeView>
    </div>

    <div class="container text-center text-danger">
        <div>@errorMessage</div>
    </div>
    </div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private int index { get; set; }
    private int customerId;
    private bool isDisabled;
    private bool favorite = true;
    private bool isEditing;
    private string errorMessage;
    private string loadMore = "";
    private string show = "";
    private string rating;
    private Item item;
    private Book book;
    private Review review;
    private IList<Review> reviews;

    protected override async Task OnInitializedAsync() {
        isEditing = false;
        review = new Review();
        review.Rating = 0;
        index = 0;
        item = await itemService.GetItemAsync(Id);
        reviews = await itemService.GetItemReviewsAsync(index, item);

        if (item.Category.Name.Equals("Book"))
            book = await itemService.GetBookAsync(Id);

        await GetAverageRatingAsync();
        SetDisabledState();
        try {
            customerId = int.Parse((await authStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue("Id"));
        }
        catch (Exception e) {
            customerId = -1;
        }

        if (customerId != -1) {
            IList<Item> wishlist = await itemService.GetCustomerWishlistAsync(customerId);
            favorite = wishlist.FirstOrDefault(i => i.Id == item.Id) != null;
        }

        bool loggedCustomerReview = await itemService.GetReviewAsync(Id, customerId);
        if (loggedCustomerReview) {
            show = "d-none";
        }
        FilterCustomerReview();
    }

    private async Task GetAverageRatingAsync() {
        double r = await itemService.GetAverageRating(item.Id);
        r = Math.Round(r, 2, MidpointRounding.ToEven);
        rating = r.ToString();
    }

    private async Task LoadMoreAsync() {
        index++;
        IList<Review> newList = await itemService.GetItemReviewsAsync(index, item);
        if (newList.Count == 0) {
            loadMore = "display: none";
            index--;
        }
        else {
            foreach (Review r in newList.ToList()) {
                reviews.Add(r);
            }
        }
        FilterCustomerReview();
    }

    private async Task AddToShoppingCartAsync(Item itemToAdd) {
        Item i = orderService.ShoppingCart.Add(itemToAdd);
        if (customerId != -1)
            await itemService.AddToShoppingCartAsync(i, customerId);
    }

    private async Task PerformUnfavoriteAsync() {
        favorite = false;
        await itemService.RemoveWishlistedItem(customerId, item.Id);
    }

    private async Task PerformFavoriteAsync() {
        favorite = true;
        await itemService.AddToWishlistAsync(customerId, item);
    }

    private async Task AddReviewAsync() {
        try {
            review.DateTime = new MyDateTime(new DateTime());
            Customer customer = await customerService.GetCustomerAsync(customerId);
            review.Customer = new Customer() {
                Id = customer.Id,
                FirstName = customer.FirstName,
                LastName = customer.LastName,
                Address = customer.Address,
                Email = customer.Email,
                Password = customer.Password,
                Role = customer.Role,
                PhoneNumber = customer.PhoneNumber
            };
            review.ItemId = Id;
            await itemService.AddReviewAsync(review);
            reviews.Insert(0, review);
            show = "d-none";
        }
        catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    private async Task RemoveReviewAsync(int id) {
        try {
            Review r = reviews.First(r => r.ItemId == id);
            await itemService.RemoveReviewAsync(r.ItemId, r.Customer.Id);
            reviews.Remove(r);
            show = "";
        }
        catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    private async Task EditReviewAsync() {
        try {
            review.DateTime = new MyDateTime(new DateTime());
            Customer customer = await customerService.GetCustomerAsync(customerId);
            review.Customer = new Customer() {
                Id = customer.Id,
                FirstName = customer.FirstName,
                LastName = customer.LastName,
                Address = customer.Address,
                Email = customer.Email,
                Password = customer.Password,
                Role = customer.Role,
                PhoneNumber = customer.PhoneNumber
            };
            await itemService.UpdateReviewAsync(review);
            isEditing = false;
            errorMessage = "Review is successfully edited";
        }
        catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    private bool ChangeToEdit() {
        return isEditing = !isEditing;
    }

    /*
     * This method filters through the reviews and finds the customer's review
     * Then it moves it to the first position in the list
     * For making the editing and removal of a review easier
     */

    private void FilterCustomerReview() {
        for (int i = 0; i < reviews.Count; i++) {
            if (reviews[i].Customer.Id == customerId) {
                Review rev = reviews[i];
                Review first = reviews[0];
                reviews[i] = first;
                reviews[0] = rev;
            }
        }
    }

    private void AddRating(int r) {
        review.Rating = r;
    }

    private void SetDisabledState() {
        if (item.Quantity < 1) {
            item.Status = ItemStatus.OutOfStock;
            isDisabled = true;
        }
    }

    private void View(int id, string categoryName) {
        navigationManager.NavigateTo($"EditItems/{id}/{categoryName}");
    }

}

}