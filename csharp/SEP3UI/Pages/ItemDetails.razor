@page "/ItemDetails/{id:int}"
@using SEP3Library.Model
@using SEP3UI.Data
@using System.Runtime.InteropServices.ComTypes
@inject IItemService itemService
@inject IOrderService orderService
@inject EnumHelper enumHelper


@if (item == null) {
    <h2> Loading </h2>
}
else {
    <div class="container">
        <div class="card row ">
            <div class="row border-top border-bottom">
                <div class="col-md-6">
                    <div class="img-responsive m-3">
                        <img src="@item.ImageName"/>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="pt-5 pl-5">
                        <h2 class="mb-4">
                            <div class="retroshd">@item.Name</div>
                        </h2>
                        <div>
                            <b>About:</b> @item.Description
                        </div>
                        <div class="mt-2">
                            <span>
                                <strong>Category:</strong>
                                <a rel="tag" href="#">@item.Category.ToString()</a>
                            </span>
                        </div>
                        @if (item.Category == Category.Book && book != null) {
                            <div class="mt-2">
                                <span>
                                    <strong>AuthorName:</strong>
                                    <a rel="tag" href="#">@book.AuthorFirstName @book.AuthorLastName</a>
                                </span>
                            </div>
                            <div class="mt-2">
                                <span>
                                    <strong>Publication Date: </strong>@book.PublicationDate.DateToString()
                                </span>
                            </div>
                            <div class="mt-2">
                                <span>
                                    <strong>Language: </strong>
                                    <a rel="tag" href="#">@book.Language.ToString()</a>
                                </span>
                            </div>
                            <div class="mt-2">
                                <span>
                                    <strong>Genre: </strong>
                                    <a rel="tag" href="#">@book.Genre.ToString()</a>
                                </span>
                            </div>
                        }
                        <div class="mt-2">
                            <strong>Price: </strong> <span class="amount-old">@item.Price</span>
                        </div>
                        <div class="form-group mt-2">
                            <label>
                                <strong>Quantity: </strong> @item.Quantity
                            </label>
                        </div>
                          <div class="form-group mt-2">
                            <label>
                                <strong>Status: </strong> @status
                            </label>
                        </div>
                        <div class="mt-5">
                            <button class="btn btn-round btn-dark" disabled="@isDisabled" @onclick="(() => AddToShoppingCart(item))">
                                <i class="fa fa-shopping-cart"></i> Add to Shopping Cart
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public int Id { get; set; }

    public string ErrorMessage { get; set; }

    private Item item;
    private Book book;
    private int ShoppingCartQuantity { get; set; }
    private string status { get; set; }
    
    private bool isDisabled { get; set; }

    protected override async Task OnInitializedAsync() {
        try {
            ShoppingCartQuantity = 1;
            item = await itemService.GetItemAsync(Id);
            if (item.Category == Category.Book) {
                book = await itemService.GetBookAsync(Id);
            }
            if(item.Status == ItemStatus.InStock)
                status = enumHelper.GetDescription(ItemStatus.InStock);
            else {
                status = enumHelper.GetDescription(ItemStatus.OutOfStock);
            }
            GetDisabledState();
        }
        catch (Exception e) {
            ErrorMessage = e.Message;
        }
    }
    
    private bool GetDisabledState() {
        if (item.Quantity < 1) {
            item.Status = ItemStatus.OutOfStock;
            isDisabled = true;
         
        }
        return isDisabled;
    }

    private void AddToShoppingCart(Item item) {
        orderService.ShoppingCart.AddToShoppingCart(item);
    }

}

