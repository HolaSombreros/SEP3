@page "/ItemDetails/{id:int}"
@using SEP3UI.Data
@using System.Security.Claims
@using SEP3Library.Models
@using SEP3UI.Authentication
@inject IItemService itemService
@inject IOrderService orderService
@inject ICustomerService customerService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager

@if (item == null) {
    <h2>Loading</h2>
}
else {
    <div class="text-center mb-3">
        <h2>Item details</h2>
    </div>
    <div class="container">
    <div class="card row">
        <div class="row border-top border-bottom">
            <div class="col-md-6">
                <div class="img-responsive m-3 text-center mt-5">
                    <img src="@item.ImageName"/>
                </div>
            </div>
            <div class="col-md-6">
                <div class="pt-5 pl-5">
                    <AuthorizeView>
                        <div class="text-right mr-5">
                            @if (favorite) {
                                <i class="favorite oi oi-heart" @onclick="PerformUnfavoriteAsync"></i>
                            }
                            else {
                                <i class="non-favorite oi oi-heart" @onclick="PerformFavoriteAsync"></i>
                            }
                            <i class="non-favorite icons oi oi-comment-square ml-3"></i>
                        </div>
                    </AuthorizeView>
                    <h2 class="mb-4">
                        <div class="retroshd">@item.Name</div>
                    </h2>
                    <div>
                        <b>About:</b> @item.Description
                    </div>
                    <div class="mt-2">
                        <span>
                            <strong>Category:</strong>
                            <a rel="tag" href="#">@item.Category.Name</a>
                        </span>
                    </div>
                    @if (item.Category.Name.Equals("Book") && book != null) {
                        <div class="mt-2">
                            <span>
                                <strong>Author:</strong>
                                @foreach (Author author in book.Authors) {
                                    <a rel="tag" href="#">@author.FirstName @author.LastName</a>
                                }
                            </span>
                        </div>
                        <div class="mt-2">
                            <span>
                                <strong>Publication Date: </strong>@book.PublicationDate
                            </span>
                        </div>
                        <div class="mt-2">
                            <span>
                                <strong>Language: </strong>
                                <a rel="tag" href="#">@book.Language</a>
                            </span>
                        </div>
                        <div class="mt-2">
                            <span>
                                <strong>Genre: </strong>
                                @foreach (Genre g in book.Genre) {
                                    <a rel="tag" href="#">@g.Name</a>
                                }
                            </span>
                        </div>
                    }
                    <div class="mt-2">
                        <strong>Price: </strong> <span class="amount-old">@item.PriceIncludingDiscount DKK</span>
                        @if (item.Discount > 0) {
                            <span class="ml-2 text-danger">(@item.Discount% OFF)</span>
                        }
                    </div>
                    <div class="form-group mt-2">
                        <label>
                            <strong>Quantity: </strong> @item.Quantity
                        </label>
                    </div>
                    <div class="form-group mt-2">
                        <label>
                            <strong>Status: </strong>
                        </label>
                        @if (item.Quantity == 0) {
                            <span class="text-danger"> Out of stock</span>
                        }
                        else {
                            <span class="text-success"> In stock</span>
                        }
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-round btn-dark" disabled="@isDisabled" @onclick="(() => AddToShoppingCart(item))">Add to Shopping Cart</button>
                        <AuthorizeView Policy="@Policies.IsAdmin">
                            <button class="btn btn-round btn-dark" @onclick="(() => View(item.Id, item.Category.Name))">
                                Edit Item
                            </button>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @foreach (Review review in reviews) {
        <div class="bg-white rounded shadow-sm p-4 mb-4 restaurant-detailed-ratings-and-reviews">
            <h5 class="mb-1">All Ratings and Reviews</h5>
            <div class="reviews-members pt-4 pb-4">
                <div class="media">
                    <div class="media-body">
                        <div class="reviews-members-header">
                            <span class="star-rating float-right"></span>
                            <h6 class="mb-1">
                                <a class="text-black" href="#">@review.CustomerFirstName @review.CustomerLastName</a>
                            </h6>
                            <p class="text-gray">@review.DateTime.Day/@review.DateTime.Month/@review.DateTime.Year</p>
                        </div>
                        <div class="reviews-members-body">
                            <p>@review.Comment</p>
                        </div>
                        <div class="">
                            @for (int i = 0; i < review.Rating; i++) {
                                <i class="icons oi oi-star" style="color: darkred" id="star1"></i>
                            }
                            @for (int i = 0; i < 5 - review.Rating; i++) {
                                <i class="icons oi oi-star" style="color:grey;" id="star1"></i>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <div class="text-center">
        <button class="btn btn-md btn-dark order-button" style="@loadMore" @onclick="LoadMoreAsync">Load more</button>
    </div>
    <div class="@show">
        <AuthorizeView>
            <EditForm Model="review" Context="addReview">
                <DataAnnotationsValidator/>
                <div class=" rounded shadow-sm p-4 mb-5 container">
                    <form>
                        <div class="form-group">
                            <h5 class="mb-4">Leave a comment</h5>
                            <label>Your Comment</label>
                            <textarea class="form-control" @bind="@review.Comment"></textarea>
                        </div>
                        <ValidationMessage For="@(() => review.Comment)"/>
                        <p class="mb-2">Rate the item</p>
                        <div class="rating">
                            @* @for (int i = 1; i <= 5; i++) { *@
                            @*     <input type="radio" name="test" id="@GetNameFromNumber(i)" onclick="@AddRating(i)"/> *@
                            @*     <label for="@GetNameFromNumber(i)"> *@
                            @*         <i class="oi oi-star"></i> *@
                            @*     </label> *@
                            @* } *@
                            <input type="radio" name="test" id="one" checked @onclick="@(() => AddRating(1))"/>
                            <label for="one">
                                <i class="oi oi-star"></i>
                            </label>
                            <input type="radio" name="test" id="two" @onclick="@(() => AddRating(2))"/>
                            <label for="two">
                                <i class="oi oi-star"></i>
                            </label>
                            <input type="radio" name="test" id="three" @onclick="@(() => AddRating(3))"/>
                            <label for="three">
                                <i class="oi oi-star"></i>
                            </label>
                            <input type="radio" name="test" id="four" @onclick="@(() => AddRating(4))"/>
                            <label for="four">
                                <i class="oi oi-star"></i>
                            </label>
                            <input type="radio" name="test" id="five" @onclick="@(() => AddRating(5))"/>
                            <label for="five">
                                <i class="oi oi-star"></i>
                            </label>
                        </div>
                        <div class="form-group text-center">
                            <button class="btn btn-round btn-dark" @onclick="AddReview"> Submit Comment</button>
                        </div>
                    </form>
                </div>
            </EditForm>
        </AuthorizeView>
    </div>
    <div class="container text-center text-danger">
        <div>@errorMessage</div>
    </div>
    }

    @code {

        [Parameter]
        public int Id { get; set; }

        private int index { get; set; }
        private int customerId;
        private Item item;
        private Book book;
        private bool isDisabled;
        private bool favorite = true;
        private IList<Review> reviews;
        private Review review;
        private string errorMessage;
        private string loadMore = "";
        private string comment = "";
        private string show = "";

        protected override async Task OnInitializedAsync() {
            review = new Review();
            index = 0;
            item = await itemService.GetItemAsync(Id);
            reviews = await itemService.GetItemReviewsAsync(index, item);
            if (item.Category.Name.Equals("Book")) {
                book = await itemService.GetBookAsync(Id);
            }

            SetDisabledState();
            try {
                customerId = int.Parse((await authStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue("Id"));
            }
            catch (Exception e) {
                customerId = -1;
            }

            if (customerId != -1) {
                IList<Item> wishlist = await customerService.GetCustomerWishlistAsync(customerId);
                favorite = wishlist.FirstOrDefault(i => i.Id == item.Id) != null;
            }
            foreach (Review r in reviews) {
                if (r.CustomerId == customerId)
                    show = "d-none";
            }
        }

        private async Task LoadMoreAsync() {
            index++;
            IList<Review> newList = await itemService.GetItemReviewsAsync(index, item);
            if (newList.Count == 0) {
                loadMore = "display: none";
                index--;
            }
            else {
                foreach (Review r in newList.ToList()) {
                    reviews.Add(r);
                }
            }
        }

        private void SetDisabledState() {
            if (item.Quantity < 1) {
                item.Status = ItemStatus.OutOfStock;
                isDisabled = true;
            }
        }

        private async Task AddToShoppingCart(Item itemToAdd) {
            Item i = orderService.ShoppingCart.AddToShoppingCart(itemToAdd);
            if (customerId != -1)
                await customerService.AddToShoppingCartAsync(i, customerId);
        }

        private void View(int id, String categoryName) {
            navigationManager.NavigateTo($"EditItem/{id}/{categoryName}");
        }

        private async Task PerformUnfavoriteAsync() {
            favorite = false;
            await customerService.RemoveWishlistedItem(customerId, item.Id);
        }

        private async Task PerformFavoriteAsync() {
            favorite = true;
            await customerService.AddToWishlistAsync(customerId, item);
        }

        private async Task AddReview() {
            review.DateTime = new MyDateTime() {
                Day = DateTime.Now.Day,
                Month = DateTime.Now.Month,
                Year = DateTime.Now.Year
            };
            review.CustomerId = customerId;
            review.ItemId = Id;
            Customer customer = await customerService.GetCustomerAsync(customerId);
            review.CustomerFirstName = customer.FirstName;
            review.CustomerLastName = customer.LastName;
            await itemService.AddReviewAsync(review);
        // OnInitializedAsync();
        }






        private int GetNumberFromString(string id) {
            switch (id) {
                case "one":
                    return 1;
                case "two":
                    return 2;
                case "three":
                    return 3;
                case "four":
                    return 4;
                case "five":
                    return 5;
            }
            return 0;
        }

        private void AddRating(int i) {
            Console.WriteLine(i);
            review.Rating = i;
        }

    }