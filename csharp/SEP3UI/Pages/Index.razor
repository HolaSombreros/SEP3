@page "/"
@using SEP3UI.Data
@using SEP3Library.Models
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IItemService itemService
@inject IOrderService orderService
@inject ICustomerService customerService
@inject AuthenticationStateProvider authStateProvider

<div class="row">
    <div class="col-md-3 ">
        @if (categories != null) {
            <nav class="sidebar-nav" role="navigation">
                <ul class="nav sidebar-nav">
                    <div class="sidebar-header">
                        <div class="sidebar-brand">
                            <a href="#">Categories</a>
                        </div>
                    </div>
                    <li class="category">
                        <a @onclick="@LoadAllItems">All</a>
                    </li>
                    @foreach (Category category in categories) {
                        <li class="category">
                            <a @onclick="(() => LoadItemsByCategory(category))">@category.Name</a>
                        </li>
                    }
                </ul>
            </nav>
        }
    </div>
    <div class="d-block col-md-9">
        <div>
            <form class="search-bar">
                <input type="search" name="search" pattern=".*\S.*" required @bind-value="searchItem" placeholder="Type To Search..."/>
                <buttonc class="search-btn" type="submit" @onclick="@SearchButtonPressedAsync"></buttonc>
            </form>
        </div>
        <div >
            @if (filteredItems != null) {
                @if (!filteredItems.Any()) {
                    <div class="container">
                        <div class="d-block justify-content-center">
                            <div class="text-center"><strong>No items were found </strong></div>
                            <div class="text-center"><img class="img-fluid image " src="Images/blazor_meme.jpg"/></div>
                        </div>
                    </div>
                }
                else {
                    <div id="productsWrapper" class="row">
                        @foreach (Item item in filteredItems) {
                            <div class="card col-sm-3 m-3">
                                <div @onclick="@(() => NavigateToItemDetails(item))">
                                    <a asp-route-id="@item.Id" title="Order @item.Name">
                                        <div>
                                            <h3>@item.Name</h3>
                                            <img class="product-image img-fluid img-thumbnail image" src="@item.ImageName" alt="Image of @item.Name"/>
                                            <p class="card-text">@item.Description</p>
                                        </div>
                                    </a>
                                </div>
                                <div class="action">
                                    <p class="price float-left">$@string.Format("{0:f}", item.Price)</p>
                                    <button class="btn btn-sm btn-dark order-button float-right" disabled="@GetDisabledState(item)" @onclick="(() => AddToShoppingCart(item))"> Add to Shopping cart </button>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>
<div class="text-center">
    <button class="btn btn-md btn-dark order-button" style="@hidden" @onclick="LoadMore">Load more</button>
</div>

@code {
    private int customerId;
    private int itemIndex;
    private IList<Item> items;
    private IList<Item> filteredItems;
    private string hidden;
    private string searchItem;
    private IList<Category> categories;


    protected override async Task OnInitializedAsync() {
        try {
            customerId = int.Parse((await authStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue("Id"));
        }
        catch (Exception e) {
            customerId = -1;
        }
        itemIndex = 0;
        items = await itemService.GetItemsAsync(itemIndex);
        filteredItems = items;
        categories = await itemService.GetCategoriesAsync();
        hidden = "";
    }

    private bool GetDisabledState(Item item) {
        if (item.Quantity < 1)
            return true;
        return false;
    }

    private async Task LoadMore() {
        itemIndex++;
        IList<Item> newList = await itemService.GetItemsAsync(itemIndex);
        if (newList.Count == 0) {
            hidden = "display: none";
            itemIndex--;
        }
        foreach (Item item in newList) {
            items.Add(item);
        }
    }

    private void NavigateToItemDetails(Item item) {
        NavigationManager.NavigateTo("ItemDetails/" + item.Id);
    }

    private void AddToShoppingCart(Item item) {
        Item i = orderService.ShoppingCart.AddToShoppingCart(item);
        if (customerId != -1)
            customerService.AddToShoppingCartAsync(i, customerId);
    }

    private async Task SearchButtonPressedAsync() {
        filteredItems = await itemService.GetItemsBySearchAsync(searchItem, itemIndex);
    }

    private async Task LoadItemsByCategory(Category category) {
        filteredItems = await itemService.GetItemsByCategoriesAsync(category, itemIndex);
    }

    private async Task LoadAllItems() {
        filteredItems = await itemService.GetItemsAsync(itemIndex);
    }
}