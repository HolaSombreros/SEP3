@page "/"
@using SEP3UI.Data
@using SEP3Library.Models
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IItemService itemService
@inject IOrderService orderService
@inject AuthenticationStateProvider authStateProvider
<div class="container-fluid">
<div class="row">
    <div id="sidebar" class="col-xl-2 d-block">
        @if (categories != null) {
            <nav class="sidebar-nav" role="navigation">
                <ul class="nav sidebar-nav">
                    <div class="sidebar-header">
                        <div class="sidebar-brand">
                            <a>Categories</a>
                        </div>
                    </div>
                    <li class="category">
                        <a @onclick="@LoadAllItemsAsync">All</a>
                    </li>
                    @foreach (Category category in categories) {
                        <li>
                            <a @onclick="(() => LoadItemsByCategoryAsync(category))">@category.Name</a>
                        </li>
                    }
                </ul>
                <ul class="nav" id="filtering">
                    <div class="sidebar-header">
                        <div class="sidebar-brand">
                            <a>Filter</a>
                        </div>
                    </div>
                    <li>
                        <div class="dropdown">
                            <a class="btn btn-secondary dropdown-toggle text-center" @onclick="TogglePDropdownMenu">
                                Price
                            </a>
                            @if (!collapsePDropdownMenu) {
                                <div class="d-block dropdown-menu dropdown-menu-right" style="cursor: pointer">
                                    <a class="dropdown-item text-center" @onclick="FilterByPriceAscendingAsync">Ascending</a>
                                    <a class="dropdown-item text-center" @onclick="FilterByPriceDescendingAsync">Descending</a>
                                </div>
                            }
                            <a class="btn btn-secondary dropdown-toggle text-center" @onclick="ToggleRDropdownMenu">
                                Rating
                            </a>
                            @if (!collapseRDropdownMenu) {
                                <div class="d-block dropdown-menu dropdown-menu-right" style="cursor: pointer">
                                    <a class="dropdown-item text-center" @onclick="FilterByRatingAscendingAsync">Ascending</a>
                                    <a class="dropdown-item text-center" @onclick="FilterByRatingDescendingAsync">Descending</a>
                                </div>
                            }
                            
                            <a class="btn btn-secondary dropdown-toggle text-center" @onclick="ToggleDDropdownMenu">Discount</a>
                            @if (!collapseDDropdownMenu) {
                                <div class="d-block dropdown-menu dropdown-menu-right" style="cursor: pointer">
                                    <a class="dropdown-item text-center" @onclick="SortByDiscountAscAsync">Ascending</a>
                                    <a class="dropdown-item text-center" @onclick="SortByDiscountDescAsync">Descending</a>
                                </div>
                            }
                            
                            <a class="btn btn-secondary dropdown-toggle text-center" @onclick="ToggleSDropdownMenu">Status</a>
                            @if (!collapseSDropdownMenu) {
                                <div class="d-block dropdown-menu dropdown-menu-right" style="cursor: pointer">
                                    <a class="dropdown-item text-center" @onclick="SortByStatusInStockAsync">In stock</a>
                                    <a class="dropdown-item text-center" @onclick="SortByStatusOutOfStockAsync">Out of stock</a>
                                </div>
                            }
                        </div>
                    </li>
                </ul>
            </nav>
        }
    </div>
    <div class="d-block offset-lg-1 col-xl-9">
        <div>
            <div class="search-bar">
                <input type="search" name="search" pattern=".*\S.*" required @bind-value="searchItem" placeholder="Type To Search..."/>
                <button class="search-btn" @onclick="@SearchButtonPressedAsync"></button>
            </div>
        </div>
        <div >
            @if (filteredItems != null) {
                @if (!filteredItems.Any()) {
                    <div class="container">
                        <div class="d-block justify-content-center">
                            <div class="text-center">
                                <strong>No items were found </strong>
                            </div>
                            <div class="text-center">
                                <img class="img-fluid image " src="Images/blazor_meme.jpg"/>
                            </div>
                        </div>
                    </div>
                }
                else {
                    <div id="productsWrapper" class="row px-4">
                        @foreach (Item item in filteredItems) {
                            <div class="card col-xl-3 col-lg-5 m-3" style="min-width: 400px">
                                <div @onclick="@(() => NavigateToItemDetails(item))">
                                    <a asp-route-id="@item.Id" title="Order @item.Name">
                                        <div class="text-center">
                                            <h3>@item.Name</h3>
                                            <img class="product-image img-fluid img-thumbnail image" src="@item.FilePath" alt="Image of @item.Name"/>
                                            <p class="card-text">@item.Description</p>
                                            <p class="card-text"> Rating: @item.AverageRating</p>
                                        </div>
                                    </a>
                                </div>
                                <div>
                                    <p class="price">@string.Format("{0:f}", item.PriceIncludingDiscount) DKK</p>
                                    <button class="btn btn-sm btn-dark order-button float-right" disabled="@GetDisabledState(item)" @onclick="(() => AddToShoppingCart(item))"> Add to Shopping cart </button>
                                    @if (item.Discount > 0) {
                                        <p style="color: darkred" class="d-block">
                                            <strong> DISCOUNT: @item.Discount%</strong>
                                        </p>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="text-center">
                        <button class="btn btn-md btn-dark order-button" style="@hidden" @onclick="LoadMoreAsync">Load more</button>
                    </div>
                }
            }
        </div>
    </div>
</div>

</div>

@code {
    private int customerId;
    private int itemIndex;
    private IList<Item> items;
    private IList<Item> filteredItems;
    private string hidden;
    private string searchItem;
    private IList<Category> categories;
    private string priceOrder;
    private bool collapsePDropdownMenu = true;
    private bool collapseRDropdownMenu = true;
    private bool collapseDDropdownMenu = true;
    private bool collapseSDropdownMenu = true;
    private string category;
    private string ratingOrder;
    private string discountOrder;
    private string statusOrder;
    
    protected override async Task OnInitializedAsync() {
        try {
            customerId = int.Parse((await authStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue("Id"));
        }
        catch (Exception e) {
            customerId = -1;
        }
        itemIndex = 0;
        priceOrder = null;
        category = null;
        ratingOrder = null;
        searchItem = null;
        items = await itemService.GetItemsAsync(itemIndex, category, priceOrder, ratingOrder, null, null, searchItem);
        foreach (var item in items) {
            await GetAverageReview(item);
        }
        filteredItems = items;
        categories = await itemService.GetCategoriesAsync();
        hidden = "";
        priceOrder = "";
        NavBarEvent.Invoke();
    }

    private bool GetDisabledState(Item item) {
        if (item.Quantity < 1)
            return true;
        return false;
    }

    private async Task LoadMoreAsync() {
        itemIndex++;
        IList<Item> newList = await itemService.GetItemsAsync(itemIndex, category, priceOrder, ratingOrder, discountOrder, null, searchItem);
        if (newList.Count == 0) {
            hidden = "display: none";
            itemIndex--;
        }
        foreach (Item item in newList) {
            await GetAverageReview(item);
            filteredItems.Add(item);
        }
    }

    private void NavigateToItemDetails(Item item) {
        NavigationManager.NavigateTo("ItemDetails/" + item.Id);
    }

    private async Task AddToShoppingCart(Item item) {
        Item i = orderService.ShoppingCart.Add(item);
        if (customerId != -1)
            if (i.Quantity == 1) {
                await itemService.AddToShoppingCartAsync(i, customerId);
            } else {
                await itemService.UpdateShoppingCartAsync(i, i.Id, customerId);
            }
    }

    private async Task SearchButtonPressedAsync() {
        filteredItems = await itemService.GetItemsAsync(itemIndex,null,null,null, null, null, searchItem);
        foreach (var item in filteredItems) {
            await GetAverageReview(item);
        }
    }

    private async Task LoadItemsByCategoryAsync(Category category) {
        this.category = category.Name;
        filteredItems = await itemService.GetItemsAsync(itemIndex, this.category, null, null, null, null, null);
        foreach (var item in filteredItems) {
            await GetAverageReview(item);
        }
        hidden = "";
        itemIndex = 0;
    }

    private async Task LoadAllItemsAsync() {
        priceOrder = null;
        category = null;
        ratingOrder = null;
        searchItem = null;
        filteredItems = await itemService.GetItemsAsync(itemIndex, category, priceOrder, ratingOrder, null, null, searchItem);
        foreach (var item in filteredItems) {
            await GetAverageReview(item);
        }
    }

    private async Task FilterByPriceAscendingAsync() {
        priceOrder = "ascending";
        CollapseDropdownMenu();
        filteredItems = await itemService.GetItemsAsync(itemIndex, null, priceOrder, null, null, null, null);
        foreach (var item in filteredItems) {
            await GetAverageReview(item);
        }
        hidden = "";
        itemIndex = 0;
    }

    private async Task FilterByPriceDescendingAsync() {
        priceOrder = "descending";
        CollapseDropdownMenu();
        filteredItems = await itemService.GetItemsAsync(itemIndex, null, priceOrder, null, null, null, null);
        foreach (var item in filteredItems) {
            await GetAverageReview(item);
        }
        hidden = "";
        itemIndex = 0;
    }
    
    private async Task FilterByRatingAscendingAsync() {
        ratingOrder = "ascending";
        CollapseDropdownMenu();
        filteredItems = await itemService.GetItemsAsync(itemIndex, null, null, ratingOrder, null, null, null);
        foreach (var item in filteredItems) {
            await GetAverageReview(item);
        }
        hidden = "";
        itemIndex = 0;
    }
    
    private async Task FilterByRatingDescendingAsync() {
        ratingOrder = "descending";
        CollapseDropdownMenu();
        filteredItems = await itemService.GetItemsAsync(itemIndex, null, null, ratingOrder, null, null, null);
        foreach (var item in filteredItems) {
            await GetAverageReview(item);
        }
        hidden = "";
        itemIndex = 0;
    }

    private void TogglePDropdownMenu() {
        CollapseDropdownMenu();
        collapsePDropdownMenu = !collapsePDropdownMenu;
    }

    private void ToggleRDropdownMenu() {
        CollapseDropdownMenu();
        collapseRDropdownMenu = !collapseRDropdownMenu;
    }

    private void ToggleDDropdownMenu() {
        CollapseDropdownMenu();
        collapseDDropdownMenu = !collapseDDropdownMenu;
    }

    private void ToggleSDropdownMenu() {
        CollapseDropdownMenu();
        collapseSDropdownMenu = !collapseSDropdownMenu;
    }

    private void CollapseDropdownMenu() {
        collapsePDropdownMenu = true;
        collapseRDropdownMenu = true;
        collapseDDropdownMenu = true;
        collapseSDropdownMenu = true;
    }

    private async Task GetAverageReview(Item item ) {
        item.AverageRating =  await itemService.GetAverageRating(item.Id);
        item.AverageRating = Math.Round(item.AverageRating, 2, MidpointRounding.ToEven);
    }

    private async Task SortByDiscountAscAsync() {
        discountOrder = "ASC";
        CollapseDropdownMenu();
        filteredItems = await itemService.GetItemsAsync(itemIndex, null, null, null, discountOrder, null, null);
    }

    private async Task SortByDiscountDescAsync() {
        discountOrder = "DESC";
        CollapseDropdownMenu();
        filteredItems = await itemService.GetItemsAsync(itemIndex, null, null, null, discountOrder, null, null);
    }

    private async Task SortByStatusInStockAsync() {
        statusOrder = "In Stock";
        CollapseDropdownMenu();
        filteredItems = await itemService.GetItemsAsync(itemIndex, null, null, null, null, statusOrder, null);
    }

    private async Task SortByStatusOutOfStockAsync() {
        statusOrder = "Out of Stock";
        CollapseDropdownMenu();
        filteredItems = await itemService.GetItemsAsync(itemIndex, null, null, null, null, statusOrder, null);
    }
}