@page "/AddItems"
@page "/EditItem/{Id:int}/{CategoryName}"
@using SEP3UI.Authentication
@using SEP3Library.Models
@using SEP3Library.UIModels
@using SEP3UI.Data
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject IItemService itemService
<header>
    <div class="overlay">
        <h1>Add Items</h1>
    
@if (categories != null &&itemModel !=null) {
    <EditForm Model="@itemModel">
        <div class="container text-center d-flex flex-column align-items-center mt-3">
            <DataAnnotationsValidator/>
            <div class="row">
                <div class="col-md-4 mr-3">
                    <div class="">
                        <label class="simple-customised"> Select category:</label>
                        @foreach (var category in categories) {
                            <button type="button" @onclick="@(() => SetCategory(category))" class="list-group-item list-group-item-action"> @category.Name</button>
                        }
                        <button type="button" class="list-group-item list-group-item-action">Other</button>
                    </div>
                    <div class="mt-3">
                        <input @bind-value="itemModel.Name" type="text" data-mdb-showcounter="true" maxlength="100" id="name"/>
                        <label class="label-customised" for="name">Name:</label>
                    </div>
                    <ValidationMessage For="@(() => itemModel.Name)"/>
                    <div class="mt-3 text-center">
                        <label class="label-customised" for="description">Description:</label>
                        <textarea @bind="itemModel.Description" type="text" maxlength="500" id="description" rows="5"></textarea>
                    </div>
                    <ValidationMessage For="@(() => itemModel.Description)"/>
                </div>
                <div class="col-md-4 mr-3">
                    <div>
                        <label for="controlFile">Upload an image:</label>
                        <input type="file" id="controlFile">
                    </div>
                    
                    <div class="mt-3 inputs">
                        <input @bind-value="itemModel.Price" type="number" data-mdb-showcounter="true" id="price"/>
                        <label class="label-customised" for="price">Price:</label>
                    </div>
                    <ValidationMessage For="@(() => itemModel.Price)"/>

                    <div class="mt-3 inputs">
                        <input @bind-value="itemModel.Quantity" type="number" data-mdb-showcounter="true" id="quantity"/>
                        <label class="label-customised" for="quantity">Quantity:</label>
                    </div>
                    <ValidationMessage For="@(() => itemModel.Quantity)"/>

                    <div class="mt-3 inputs">
                        <input @bind-value="itemModel.Discount" type="number" data-mdb-showcounter="true" id="discount"/>
                        <label class="label-customised" for="discount">Discount:</label>
                    </div>
                    <ValidationMessage For="@(() => itemModel.Discount)"/>
                </div>
                @if (itemModel.Category != null && itemModel.Category.Name.Equals("Book")) {
                    <div class="col-md-3 mr-3">
                        <div>
                            <input @bind-value="itemModel.Isbn" type="text" data-mdb-showcounter="true" maxlength="100" id="bookIsbn"/>
                            <label class="label-customised" for="bookIsbn">Book isbn:</label>
                        </div>
                        <ValidationMessage For="@(() => itemModel.Isbn)"/>
                        
                        <div>
                            <input @bind-value="authorFirstName" type="text" data-mdb-showcounter="true" maxlength="100" id="authorFName"/>
                            <label class="label-customised" for="authorFName">Author first name:</label>
                        </div>
                        <ValidationMessage For="@(() => authorFirstName)"/>

                        <div>
                            <input @bind-value="authorLastName" type="text" data-mdb-showcounter="true" maxlength="100" id="authorLName"/>
                            <label class="label-customised" for="authorLName">Author last name:</label>
                        </div>
                        <ValidationMessage For="@(() => authorLastName)"/>
                        
                        <div>
                            <br>
                            <button @onclick="(() => AddAuthorsClicked())" class="btn btn-primary">Add author</button>
                        </div>
                        @if (addMoreAuthors) {
                            <div class="list-group">
                            </div>
                        }
                        <table class="table table-striped">
                            <thead>
                            <tr>
                                <th>First Name</th>
                                <th>Last Name</th>
                                <th>Remove</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (Author author in itemModel.Authors) {
                                <tr class="family-row">
                                    <td>@author.LastName</td>
                                    <td>@author.LastName</td>
                                    <td>
                                        <i @onclick="@(() => RemoveAuthorClicked(author))"class="oi oi-trash" style="color:red"></i>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>

                        <div class="mt-1">
                            <input @bind-value="itemModel.Language" type="text" data-mdb-showcounter="true" maxlength="100" id="language"/>
                            <label class="label-customised" for="language">Book language:</label>
                        </div>
                        <ValidationMessage For="@(() => itemModel.Language)"/>

                        <div>
                            <label id="problematic-label">Date:</label>
                            <InputDate @bind-Value="itemModel.PublicationDate"/>
                        </div>

                        <div class="d-flex justify-content-center">
                            <label class="simple-customised">Genres:</label>
                        </div>
                        <div class="form-check form-check-inline">
                            @foreach (Genre g in genres) {
                                <input @onclick="@(() => AddGenre(g))" class="form-check-input ml-2" type="checkbox" id="inlineCheckbox" value="option1">
                                <label class="form-check-label" for="inlineCheckbox">@g.Name</label>
                            }
                        </div>
                        <ValidationMessage For="@(() => itemModel.Genre)"/>
                    </div>
                }
            </div>
        </div>
        <div class="form-group d-flex text-center justify-content-center">
            <label class=" control-label"></label>
            <div>
                <br>
                <button type="submit" @onclick="(() => AddItemAsync())" class="btn btn-primary">Submit</button>
            </div>
        </div>
         <div class="card d-flex align-items-center text-danger">
            <div>@errorMessage</div>
        </div>
    </EditForm>
}
</div>
</header>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string CategoryName { get; set; }
    
    private IList<Category> categories;
    private IList<Genre> genres;
    private List<Genre> selectedGenres = new List<Genre>();
    private ItemModel itemModel = new ItemModel();
    private string errorMessage;
    private bool addMoreAuthors;
    
    [MaxLength(50, ErrorMessage = "The first name cannot exceed 50 characters")]
    [Required(ErrorMessage = "Please enter a first name for the author")]
    private string authorFirstName;
    
    [Required(ErrorMessage = "Please enter a last name for the author")]
    [MaxLength(50, ErrorMessage = "The first name cannot exceed 50 characters")]
    private string authorLastName;

    protected override async Task OnInitializedAsync() {
        categories = await itemService.GetCategoriesAsync();
        genres = await itemService.GetGenresAsync();
        //itemModel.BookModel = new BookModel();
        itemModel.Authors = new List<Author>();
        addMoreAuthors = false;
        if (CategoryName != null) {
            Book book = null;
            Item item = null;
            if (CategoryName.Equals("Book")) {
                book = await itemService.GetBookAsync(Id);
                itemModel.Name = book.Name;
                itemModel.Description = book.Description;
                itemModel.Category = book.Category;
                itemModel.Discount = book.Discount;
                itemModel.Price = book.Price;
                itemModel.Status = book.Status;
                itemModel.Quantity = book.Quantity;
                itemModel.Isbn = book.Isbn;
                itemModel.Authors = book.Authors;
                itemModel.Genre = book.Genre;
                itemModel.Language = book.Language;
                itemModel.PublicationDate = new DateTime(book.PublicationDate.Year, book.PublicationDate.Month, book.PublicationDate.Day, book.PublicationDate.Hour,
                    book.PublicationDate.Minute, book.PublicationDate.Second);
                genres = itemModel.Genre;
            }
            else {
                item = await itemService.GetItemAsync(Id);
                itemModel.Name = item.Name;
                itemModel.Description = item.Description;
                itemModel.Category = item.Category;
                itemModel.Discount = item.Discount;
                itemModel.Price = item.Price;
                itemModel.Status = item.Status;
                itemModel.Quantity = item.Quantity;
            }
        }
    }

    private async Task AddItemAsync() {
        try {
            itemModel.Genre = selectedGenres;
            if (itemModel.Category.Name.Equals("Book")) {
                if (selectedGenres.Count < 1 || itemModel.Authors.Count < 1)
                    errorMessage = "Please input a genre or author";
                else 
                    await itemService.AddItemAsync(itemModel);
            }
            else {
                await itemService.AddItemAsync(itemModel);
                //TODO: Receive this from tier2-tier3
                errorMessage = "Successful item added";
            }
        }
        catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    private void SetCategory(Category category) {
        itemModel.Category = category;
    }

    private void SetStatus(ItemStatus status) {
        itemModel.Status = status;
    }

    private void AddGenre(Genre genre) {
        selectedGenres.Add(genre);
    }

    private bool AddAuthorsClicked() {
        Author author = new Author() {
            FirstName = authorFirstName,
            LastName = authorLastName
        };
        itemModel.Authors.Add(author);
        authorFirstName = null;
        authorLastName = null;
        addMoreAuthors = true;
        return addMoreAuthors;
    }

    private void RemoveAuthorClicked(Author author) {
        itemModel.Authors.Remove(author);
    }

}

