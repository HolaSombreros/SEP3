@page "/OrderList"
@using SEP3UI.Data
@using SEP3Library.Models
@using SEP3UI.Authentication
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject IOrderService orderService
@inject ICustomerService customerService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager

<div class="container-fluid px-4 text-center">
    <h2 class="mt-3 mb-3">Orders</h2>
                <div class="row mb-3">
                <div class="row text-left col-xl-4 col-md-6 align-items-center">
                        <div class = "col-5">
                            Filter by User Id: 
                        </div>
                        <div class="col-5"> 
                            <input class="form-control" type="number" style="width: 150px" @oninput="@((arg) => SetIdFilter(arg))"/>
                        </div>
                   
                </div>
            </div>
            <div class="my-2 row">
                <div class="row col-xl-4 col-md-6 text-left align-items-center">
                    <div class="col-5">
                        Filter by status:
                    </div>
                    <div class="col-5"> 
                        <select class="form-control d-inline" style="width: 150px" @onchange="@((arg) => SetStatusFilter(arg))">
                            <option>Any</option>
                            @foreach (OrderStatus status in Enum.GetValues(typeof(OrderStatus))) {
                                <option>@status.ToString()</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
            <div class="mb-3 text-left">
                <button class="btn btn-dark" @onclick="FilterAsync">Filter</button>
            </div>
    @if (orders == null || !orders.Any()) {
        <h2 class="mt-3 mb-3">No items to display</h2>
    }
    else {
        <div class="row">
            <table class="table table-hover table-responsive-lg col-12" style="width: 100%">
                <thead class="thead-light">
                <tr>
                    <th scope="col">Order ID</th>
                    <th scope="col">Items</th>
                    <th scope="col">Total</th>
                    <th scope="col">Customer ID</th>
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Address</th>
                    <th scope="col">Status</th>
                    <th scope="col">Time</th>
                </tr>
                </thead>
                <tbody>
                @foreach (Order order in orders) {
                    decimal totalPrice = Math.Round(order.Items.Sum(i => i.Price * i.Quantity) + orderService.ShoppingCart.ShippingPrice, 2, MidpointRounding.ToEven);
                    <tr @onclick="@(() => View(order.Id))" class="family-row">
                        <td>@order.Id</td>
                        <td>@GetAmount(order)</td>
                        <td>@totalPrice</td>
                        <td>@(order.CustomerId == 0 ? "Not Registered" : order.CustomerId)</td>
                        <td>@order.FirstName @order.LastName</td>
                        <td>@order.Email</td>
                        <td>@order.Address.ToString()</td>
                        <td>@order.OrderStatus.ToString()</td>
                        <td>@order.DateTime.ToString()</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
    <div class="text-center">
        <button class="btn btn-md btn-dark" style="@hidden" @onclick="LoadMoreAsync">Load more</button>
    </div>
</div>


@code {
    private IList<Order> orders;
    private int orderIndex;
    private string hidden;
    private string filterStatus = "Any";
    private int filterId;

    protected override async Task OnInitializedAsync() {
        NavBarEvent.Invoke();
        orders = await orderService.GetOrdersAsync(orderIndex, filterId, filterStatus);
        orderIndex = 0;
        hidden = "";
    }

    private async Task LoadMoreAsync() {
        orderIndex++;
        IList<Order> newList = await orderService.GetOrdersAsync(orderIndex, filterId, filterStatus);
        if (newList.Count == 0) {
            hidden = "display: none";
            orderIndex--;
        }
        foreach (Order order in newList) {
            orders.Add(order);
        }
    }

    private int GetAmount(Order order) {
        int amount = 0;
        foreach (Item item in order.Items) {
            amount += item.Quantity;
        }
        return amount;
    }

    private void View(int orderId) {
        navigationManager.NavigateTo($"/orders/{orderId}");
    }

    private void SetIdFilter(ChangeEventArgs args) {
        try {
            if (args.Value != null)
                filterId = Convert.ToInt32(args.Value.ToString());
        } catch (Exception e) {
            filterId = 0;
        }
    }

    private void SetStatusFilter(ChangeEventArgs args) {
        if (args.Value != null)
            filterStatus = args.Value.ToString();
    }

    private async Task FilterAsync() {
        orderIndex = 0;
        orders = await orderService.GetOrdersAsync(orderIndex, filterId, filterStatus);
    }
}