@page "/OrderList"
@using SEP3UI.Data
@using SEP3Library.Models
@using SEP3UI.Authentication
@using System.Security.Claims
@attribute [Authorize]
@inject IOrderService orderService
@inject ICustomerService customerService
@inject AuthenticationStateProvider authStateProvider
<div class="container-fluid px-4">
    <h1>Orders</h1>
    @if (orders == null || !orders.Any()) {
        <p>
            <em>No orders to display</em>
        </p>
    }
    else {
        <table class="table table-striped table-responsive-sm">
            <thead>
            <tr>
                <th>Order ID</th>
                <th>Items</th>
                <th>Total</th>
                <AuthorizeView Policy="@Policies.IsAdmin">
                <th>Customer ID</th>
                </AuthorizeView>
                <th>Name</th>
                <th>Email</th>
                <th>Address</th>
                <th>Status</th>
                <th>Time</th>
            </tr>
            </thead>
            <tbody>
            @foreach (Order order in orders) {
                <tr @onclick="@(() => View(order.Id))" class="family-row">
                    <td>@order.Id</td>
                    <td>@GetAmount(order)</td>
                    <td>@GetTotal(order)</td>
                    <AuthorizeView Policy="@Policies.IsAdmin">
                    <td>@(order.CustomerId == 0 ? "Not Registered" : order.CustomerId)</td>
                    </AuthorizeView>
                    <td>@order.FirstName @order.LastName</td>
                    <td>@order.Email</td>
                    <td>@order.Address.ToString()</td>
                    <td>@order.OrderStatus.ToString()</td>
                    <td>@order.DateTime.ToString()</td>
                </tr>
            }
            </tbody>
        </table>
    }
    <div class="text-center">
        <button class="btn btn-md btn-dark order-button" style="@hidden" @onclick="LoadMoreAsync">Load more</button>
    </div>
</div>

@code {
    private IList<Order> orders;
    private int orderIndex;
    private string hidden;
    private Customer customer;
    
    protected override async Task OnInitializedAsync() {
        customer = await customerService.GetCustomerAsync(int.Parse((await authStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue("Id")));
        if (customer.Role.ToLower().Equals("administrator")) {
            orders = await orderService.GetOrdersAsync(orderIndex);
        }
        else {
            orders = await customerService.GetOrdersByCustomer(customer.Id, orderIndex);
        }
        orderIndex = 0;
        
        hidden = "";
    }

    private async Task LoadMoreAsync() {
        orderIndex++;
        IList<Order> newList = await orderService.GetOrdersAsync(orderIndex);
        if (newList.Count == 0) {
            hidden = "display: none";
            orderIndex--;
        }
        foreach (Order order in newList) {
            orders.Add(order);
        }
    }

    private int GetAmount(Order order) {
        int amount = 0;
        foreach (Item item in order.Items) {
            amount += item.Quantity;
        }
        return amount;
    }

    private decimal GetTotal(Order order) {
        decimal price = 0;
        foreach (Item item in order.Items) {
            price += item.Price;
        }
        return price;
    }
    
    private void View(int orderId) {
        
    }
}