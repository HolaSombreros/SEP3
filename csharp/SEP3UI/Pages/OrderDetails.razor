@page "/orders/{id:int}"
@using SEP3Library.Models
@using SEP3Library.UIModels
@using SEP3UI.Data
@using System.Security.Claims
@inject IOrderService orderService
@inject ICustomerService customerService
@inject AuthenticationStateProvider authStateProvider

@if (order == null) {
    <em>Loading...</em>
} else {
    <div class="container mt-3">
        <div class="row">
            <div class="col-lg-3 col-md-12 mb-md-4">
                <h4 class="text-center">Order information</h4>
                <hr/>
                <EditForm Model="@orderModel" OnValidSubmit="@UpdateOrderAsync">
                    <DataAnnotationsValidator/>
                    <div class="form-group mb-3">
                        <label>
                            <strong>Order Id</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-key"></span>
                                </div>
                            </div>
                            <span class="form-control">@order.Id</span>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label>
                            <strong>First name</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-person"></span>
                                </div>
                            </div>
                            <InputText class="form-control" @bind-Value="orderModel.FirstName"/>
                        </div>
                        <ValidationMessage For="@(() => orderModel.FirstName)"/>
                    </div>

                    <div class="form-group mb-3">
                        <label>
                            <strong>Last name</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-person"></span>
                                </div>
                            </div>
                            <InputText class="form-control" @bind-Value="orderModel.LastName"/>
                        </div>
                        <ValidationMessage For="@(() => orderModel.LastName)"/>
                    </div>

                    <div class="form-group mb-3">
                        <label>
                            <strong>Email address</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-envelope-closed"></span>
                                </div>
                            </div>
                            <InputText class="form-control" @bind-Value="orderModel.Email"/>
                        </div>
                        <ValidationMessage For="@(() => orderModel.Email)"/>
                    </div>

                    <div class="form-group mb-3">
                        <label>
                            <strong>Time of purchase</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-clock"></span>
                                </div>
                            </div>
                            <span class="form-control">@order.DateTime.ToString()</span>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <label>
                            <strong>Status</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-warning"></span>
                                </div>
                            </div>
                            <span class="form-control">@orderModel.OrderStatus.ToString()</span>
                        </div>
                    </div>

                    <h4 class="text-center mt-5">Delivery address</h4>
                    <hr/>
                    <div class="form-group mb-3">
                        <label>
                            <strong>Street name</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-map-marker"></span>
                                </div>
                            </div>
                            <InputText class="form-control" @bind-Value="@orderModel.Street"/>
                        </div>
                        <ValidationMessage For="@(() => orderModel.Street)"/>
                    </div>

                    <div class="form-group mb-3">
                        <label>
                            <strong>House number</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-map-marker"></span>
                                </div>
                            </div>
                            <InputText class="form-control" @bind-Value="orderModel.Number"/>
                        </div>
                        <ValidationMessage For="@(() => orderModel.Number)"/>
                    </div>

                    <div class="form-group mb-3">
                        <label>
                            <strong>Zip code</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-map-marker"></span>
                                </div>
                            </div>
                            <InputNumber class="form-control" @bind-Value="orderModel.ZipCode"/>
                        </div>
                        <ValidationMessage For="@(() => orderModel.ZipCode)"/>
                    </div>

                    <div class="form-group mb-3">
                        <label>
                            <strong>City</strong>
                        </label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <div class="input-group-text">
                                    <span class="oi oi-map-marker"></span>
                                </div>
                            </div>
                            <InputText class="form-control" @bind-Value="orderModel.City"/>
                        </div>
                        <ValidationMessage For="@(() => orderModel.City)"/>
                    </div>
                    
                    <AuthorizeView Context="other">
                        @if (order.OrderStatus == OrderStatus.Pending) {
                            <div class="form-group text-center mb-3">
                                <span class="d-block">@errorMessage</span>
                                @if (!isDisabled) {
                                    <button type="submit" class="btn btn-primary mt-3">Update Order</button>
                                }
                            </div>
                        }
                    </AuthorizeView>
                </EditForm>
            </div>
            <div class="col-lg-9 col-md-12">
                <EditForm Model="returnItemsModel" OnValidSubmit="ReturnItems">
                    <h4 class="mb-3 mt-5 mt-md-0 text-center">Items ordered</h4>
                    <table class="table">
                        <thead class="thead-light">
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <AuthorizeView Context = "other">
                            @if (order.OrderStatus == OrderStatus.Finished) {
                                <th>Return Item</th>
                            }
                            </AuthorizeView>
                            <th>Total Price</th>
                        </tr>
                        </thead>
                        <tbody>
                        @for (int i = 0; i < order.Items.Count; i++) {
                            int j = i;
                            <tr>
                                <td>@order.Items[i].Id</td>
                                <td>@order.Items[i].Name</td>
                                <td>@order.Items[i].Quantity</td>
                                <td>@order.Items[i].PriceIncludingDiscount DKK</td>
                                <AuthorizeView Context = "other">
                                    @if (order.OrderStatus == OrderStatus.Finished) {
                                        <td>
                                            <InputNumber class="form-control" @bind-Value="returnItemsModel.Items[j].Quantity" style="width: 80px;"/>
                                        </td>
                                    }
                                </AuthorizeView>
                                <td>@Math.Round(order.Items[i].PriceIncludingDiscount * order.Items[i].Quantity, 2, MidpointRounding.ToEven) DKK</td>
                            </tr>
                        }
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <AuthorizeView Context = "other">
                                @if (order.OrderStatus == OrderStatus.Finished) {
                                    <td></td>
                                }
                            </AuthorizeView>
                            <td>
                                <strong>@totalPrice DKK</strong>
                            </td>
                        </tr>
                        </tbody>
                    </table>
                    <AuthorizeView Context = "other">
                    @if (order.OrderStatus == OrderStatus.Finished) {
                        <div class="text-center">
                            <span class="d-block mb-2">@displayMessage</span>
                            <button class="btn btn-info">Return Items</button>
                        </div>
                    }
                    </AuthorizeView>
                </EditForm>
                <AuthorizeView>
                @if (order.OrderStatus == OrderStatus.Pending && !isDisabled) {
                    <div class="text-center">
                        <button class="btn btn-md btn-dark order-button" @onclick="CancelOrder">Cancel Order</button>
                    </div>
                }
                </AuthorizeView>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Order order;
    private decimal totalPrice;
    private UpdateOrderModel orderModel;
    private ReturnItemsModel returnItemsModel;
    private string errorMessage;
    private string displayMessage;
    private bool isDisabled;

    protected override async Task OnInitializedAsync() {
        order = await orderService.GetOrderAsync(Id);
        
        returnItemsModel = new ReturnItemsModel() {
            OrderId = order.Id
        };
        foreach (Item item in order.Items) {
            returnItemsModel.Items.Add(new Item() {
                Id = item.Id,
                Quantity = 0,
            });
        }
        totalPrice = Math.Round(order.Items.Sum(i => i.PriceIncludingDiscount * i.Quantity) + orderService.ShoppingCart.ShippingPrice, 2, MidpointRounding.ToEven);
        orderModel = new UpdateOrderModel() {
            Email = order.Email,
            FirstName = order.FirstName,
            LastName = order.LastName,
            Street = order.Address.Street,
            Number = order.Address.Number,
            ZipCode = order.Address.ZipCode,
            City = order.Address.City,
            OrderId = order.Id,
            CustomerId = order.CustomerId,
            OrderStatus = order.OrderStatus
        };
        int customerId = int.Parse((await authStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue("Id"));
        if (order.CustomerId != customerId) {
            isDisabled = true;
        }
    }

    private async Task UpdateOrderAsync() {
        try {
            order = await orderService.UpdateOrderAsync(orderModel);
            errorMessage = "Successfully updated!";
        }
        catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    private async Task ReturnItems() {
        try {
            if (returnItemsModel.Items.All(i => i.Quantity < 1 )) {
                throw new Exception("Please specify the items you want to return");
            }

            for (int i = 0; i < returnItemsModel.Items.Count; i++) {
                if (order.Items[i].Quantity < returnItemsModel.Items[i].Quantity) {
                    throw new Exception("Please specify a proper quantity of the items you want to return");
                }
            }

            order = await orderService.ReturnItemsAsync(returnItemsModel);
            displayMessage = "Items successfully returned!";
        } catch (Exception e) {
            displayMessage = e.Message;
        }
    }

    private async Task CancelOrder() {
        try {
            orderModel.OrderStatus = OrderStatus.Cancelled;
            order = await orderService.UpdateOrderAsync(orderModel);
            displayMessage = "The order has been cancelled";
        }
        catch (Exception e) {
            displayMessage = e.Message;
        }
    }
    
}