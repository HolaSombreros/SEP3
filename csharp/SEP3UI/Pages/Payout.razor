@page "/Payout"
@using Microsoft.AspNetCore.Components
@using SEP3Library.UIModels
@using SEP3UI.Data
@using System.Security.Claims
@using System.Threading
@using SEP3Library.Models
@inject NavigationManager NavigationManager
@inject IOrderService orderService
@inject IItemService itemService
@inject AuthenticationStateProvider authStateProvider
@inject ICustomerService customerService

<EditForm Model="@orderModel" OnValidSubmit="@HandleValidSubmitAsync">
    <div class="container">
        <fieldset>
            <legend class="d-flex justify-content-center m-3">
                <h2>Payout Form</h2>
            </legend>
            <DataAnnotationsValidator/>
            <div class="form-group d-flex justify-content-center">
                <label class="col-md-4 control-label">First name</label>
                <div class="col-md-4 input-group">
                    <div class="input-group">
                        <span class="input-group-addon"></span>
                        <InputText @bind-Value="orderModel.FirstName" placeholder="First name" class="form-control"/>
                    </div>
                    <ValidationMessage For="@(()=> orderModel.FirstName)"/>
                </div>
            </div>
            <div class="form-group d-flex justify-content-center">
                <label class="col-md-4 control-label">Last name</label>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-addon"></span>
                        <InputText @bind-Value="orderModel.LastName" name="last_name" placeholder="Last name" class="form-control" type="text"></InputText>
                    </div>
                     <ValidationMessage For="@(()=> orderModel.LastName)"/>
                </div>
            </div>
            <div class="form-group d-flex justify-content-center">
                <label class="col-md-4 control-label">E-Mail</label>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-addon"></span>
                        <InputText @bind-Value="orderModel.Email" name="email" placeholder="E-Mail" class="form-control" type="text"/>
                    </div>
                     <ValidationMessage For="@(()=> orderModel.Email)"/>
                </div>
            </div>
            <div class="form-group d-flex justify-content-center">
                <label class="col-md-4 control-label">Street</label>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-addon"></span>
                        <InputText @bind-Value="orderModel.Street" name="email" placeholder="Street" class="form-control" type="text"/>
                    </div>
                     <ValidationMessage For="@(()=> orderModel.Street)"/>
                </div>
            </div>
            <div class="form-group d-flex justify-content-center">
                <label class="col-md-4 control-label">Number</label>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-addon">
                        </span>
                        <InputText @bind-Value="orderModel.Number" name="number" placeholder="Number" class="form-control" type="text"/>
                    </div>
                     <ValidationMessage For="@(()=> orderModel.Number)"/>
                </div>
            </div>
            <div class="form-group d-flex justify-content-center">
                <label class="col-md-4 control-label">Zip code</label>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-addon">
                        </span>
                        <InputNumber @bind-Value="orderModel.ZipCode" name="zipcode" placeholder="Zip code" class="form-control" type="text"/>
                    </div>
                    <ValidationMessage For="@(()=> orderModel.ZipCode)"/>
                </div>
            </div>
             <div class="form-group d-flex justify-content-center">

                <label class="col-md-4 control-label">City</label>
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-addon"></span>
                        <InputText @bind-Value="orderModel.City" name="email" placeholder="City" class="form-control" type="text"/>
                    </div>
                    <ValidationMessage For="@(()=> orderModel.City)"/>
                </div>
            </div>
            <div class="form-group d-flex justify-content-center">
                <label class="col-md-4 control-label"></label>
                <div class="col-md-4"><br>
                    <button class="btn btn-primary">SUBMIT</button>
                </div>
            </div>
            <div class="card d-flex align-items-center text-danger">
                <div>@errorMessage</div>
            </div>
        </fieldset>
    </div>
</EditForm>

@code {
    private OrderModel orderModel = new OrderModel();
    private string errorMessage;
    private int customerId;

    protected override async Task OnInitializedAsync() {
        try {
            customerId = int.Parse((await authStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue("Id"));
            Customer customer = await customerService.GetCustomerAsync(customerId);
            orderModel.FirstName = customer.FirstName;
            orderModel.LastName = customer.LastName;
            orderModel.Email = customer.Email;
            orderModel.City = customer.Address.City;
            orderModel.Number = customer.Address.Number;
            orderModel.ZipCode = customer.Address.ZipCode;
            orderModel.Street = customer.Address.Street;
        } catch (Exception e) {
            customerId = -1;
        }
        orderModel.Items = orderService.ShoppingCart.Items;
    }
    
    private async Task HandleValidSubmitAsync() {
        try {
            if (customerId != -1) {
                orderModel.CustomerId = customerId;
                foreach (Item item in orderService.ShoppingCart.Items)
                await itemService.RemoveFromShoppingCartAsync(item.Id, customerId);
            }
            Order order =  await orderService.CreateOrderAsync(orderModel);
            orderService.ShoppingCart.Clear();
            errorMessage = "Successful purchase!";
            NavigationManager.NavigateTo($"/orders/{order.Id}");
        }
        catch (Exception e) {
            errorMessage = e.Message;
        }
    }
}