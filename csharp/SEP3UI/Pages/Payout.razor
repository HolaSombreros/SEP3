@page "/Payout"
@using System.ComponentModel.DataAnnotations
@using SEP3UI.Data
@using SEP3UI.Model
@inject NavigationManager NavigationManager
@inject IModelService modelService

<EditForm Model="@orderModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <div class="container">
        <fieldset>
                <legend class="d-flex justify-content-center m-3">
                    <h2>Payout Form</h2>
                </legend>
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group d-flex justify-content-center">
                    <label class="col-md-4 control-label">First name</label>
                    <div class="col-md-4 input-group">
                        <div class="input-group">
                            <span class="input-group-addon"></span>
                            <InputText @bind-Value="orderModel.FirstName" placeholder="First name" class="form-control"/>
                        </div>
                    </div>
                </div>
                <div class="form-group d-flex justify-content-center">
                    <label class="col-md-4 control-label">Last name</label>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-addon"></span>
                            <InputText @bind-Value="orderModel.LastName" name="last_name" placeholder="Last name" class="form-control" type="text"></InputText>
                        </div>
                    </div>
                </div>
                <div class="form-group d-flex justify-content-center">
                    <label class="col-md-4 control-label">E-Mail</label>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-addon"></span>
                            <InputText @bind-Value="orderModel.Email" name="email" placeholder="E-Mail" class="form-control" type="text"/>
                        </div>
                    </div>
                </div>
                <div class="form-group d-flex justify-content-center">
                    <label class="col-md-4 control-label">City</label>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-addon"></span>
                            <InputText @bind-Value="orderModel.City" name="email" placeholder="City" class="form-control" type="text"/>
                        </div>
                    </div>
                </div>
                <div class="form-group d-flex justify-content-center">
                    <label class="col-md-4 control-label">Street</label>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-addon"></span>
                            <InputText @bind-Value="orderModel.Street" name="email" placeholder="Street" class="form-control" type="text"/>
                        </div>
                    </div>
                </div>
                <div class="form-group d-flex justify-content-center">
                    <label class="col-md-4 control-label">Number</label>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-addon">
                            </span>
                            <InputText @bind-Value="orderModel.Number" name="number" placeholder="Number" class="form-control" type="text"/>
                        </div>
                    </div>
                </div>
                <div class="form-group d-flex justify-content-center">
                    <label class="col-md-4 control-label">Zip code</label>
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-addon">
                            </span>
                            <InputNumber @bind-Value="orderModel.ZipCode" name="zipcode" placeholder="Zip code" class="form-control" type="text"/>
                        </div>
                    </div>
                </div>
                <div class="form-group d-flex justify-content-center">
                    <label class="col-md-4 control-label"></label>
                    <div class="col-md-4"><br>
                        <button type="submit" class="btn btn-primary">SUBMIT</button>
                    </div>
                </div>
            </fieldset>
    </div>
</EditForm>

@code {
    
    private OrderModel orderModel = new OrderModel();
    
    private string ErrorMessage { get; set; }

    public class OrderModel {
        
        [Required(ErrorMessage = "Please enter a first name")]
        [MaxLength(100, ErrorMessage = "The first name cannot exceed 100 characters")]
        [MinLength(2, ErrorMessage = "The first name has to be longer than 2 characters")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Please enter a last name")]
        [MaxLength(100, ErrorMessage = "The last name cannot exceed 100 characters")]
        [MinLength(2, ErrorMessage = "The last name has to be longer than 2 characters")]
        public string LastName { get; set; }
        
        [Range(1000,9999,ErrorMessage="Zipcode must be between 1000 and 9999")]
        [Required(ErrorMessage = "Please enter a zipcode")]
        public int ZipCode { get; set; }
        
        [Required(ErrorMessage = "Please enter a number")]
        public string Number { get; set; }

        [Required(ErrorMessage = "Please enter a street name")]
        public string Street { get; set; }

        [Required(ErrorMessage = "Please enter a city")]
        public string City { get; set; }
        
        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Please enter an email address")]
        public string Email { get; set; }

        public IList<Item> Items { get; set; }
        
        public User User { get; set; }
    }

    private void HandleInvalidSubmit() {
        Console.WriteLine("Invalid");
    }

    private void HandleValidSubmit() {
        try {
            OrderModel order = new OrderModel() {
                Items = modelService.ShoppingCart.Items,
                User = new Customer() {
                    FirstName = orderModel.FirstName,
                    LastName = orderModel.LastName,
                    Email = orderModel.Email,
                    Address = new Address() {
                        City = orderModel.City,
                        ZipCode = orderModel.ZipCode,
                        Number = orderModel.Number,
                        Street = orderModel.Street
                    }
                },
            };
            modelService.CreateOrderAsync(order);
            modelService.ShoppingCart.EmptyShoppingCart();
            ErrorMessage = "Successful purchase";
        }
        catch (Exception e) {
            ErrorMessage = e.Message;
        }
    }


}