@page "/ShoppingBasket"
@using SEP3UI.Data
@using SEP3Library.Models
@using System.Security.Claims
@inject IOrderService orderService
@inject IItemService itemService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider

<div class="card mt-3">
    <div class="row">
        <div class="col-md-8 cart">
            <div class="title">
                <div class="row">
                    <div class="text-center">
                        <h4>Shopping Cart</h4>
                    </div>
                    <div class="col align-self-center text-right text-muted">
                    </div>
                </div>
            </div>
            @foreach (Item item in orderService.ShoppingCart.Items) {
                <div class="row border-top border-bottom">
                    <div class="row main align-items-center">
                        <div class="col-2">
                            <img class="img-fluid" src="@item.FilePath">
                        </div>
                        <div class="col">
                            <div class="row text-muted"></div>
                            <div class="row">@item.Name</div>
                        </div>
                        <div class="col">
                            <a @onclick="() => DecreaseQuantity(item)"> - </a>
                            <span class="border">@item.Quantity</span>
                            <a @onclick="() => IncreaseQuantity(item)"> + </a>
                        </div>
                        <div class="col">
                            @Math.Round(item.PriceIncludingDiscount * item.Quantity, 2, MidpointRounding.ToEven) DKK
                            <a class="close" @onclick="() => RemoveItemFromShoppingCart(item)">&#10005;</a>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="col-md-4 summary">
            <div class="text-center">
                <h5>Summary</h5>
            </div>
            <hr>
            <div class="row mt-3">
                <div>Total items: @GetItemsBasedOnQuantity()</div>
                <div class="col text-right">@GetFinalPrice() DKK</div>
            </div>
            <div class="row mt-3">
                <div>Shipping:</div>
                <div class="col text-right">@orderService.ShoppingCart.ShippingPrice DKK</div>
            </div>
            <div class="row mt-3">
                <div>Total price:</div>
                <div class="col text-right">@GetTotalOrderPrice() DKK</div>
            </div>
            <div class="text-center mt-3">
                <button class="btn btn-dark" disabled="@isDisabled" @onclick="@NavigateToComponent">Go to payout</button>
            </div>
        </div>
    </div>
</div>

@code {
    private int customerId;
    private bool isDisabled;

    protected override async Task OnInitializedAsync() {
        NavBarEvent.Invoke();
        try {
            customerId = int.Parse((await authStateProvider.GetAuthenticationStateAsync()).User.FindFirstValue("Id"));
        }
        catch (Exception e) {
            customerId = -1;
        }
        SetDisabledState();
    }

    private void SetDisabledState() {
        if (orderService.ShoppingCart.Items.Count == 0)
            isDisabled = true;
    }

    private void DecreaseQuantity(Item item) {
        if (item.Quantity > 1) {
            Item i = orderService.ShoppingCart.Remove(item);
            if (customerId != -1)
                itemService.UpdateShoppingCartAsync(i, i.Id, customerId);
        }
    }

    private void IncreaseQuantity(Item item) {
        Item i = orderService.ShoppingCart.Add(item);
        if (customerId != -1)
            itemService.UpdateShoppingCartAsync(i, i.Id, customerId);
    }

    private void RemoveItemFromShoppingCart(Item item) {
        orderService.ShoppingCart.RemoveAll(item);
        if (customerId != -1)
            itemService.RemoveFromShoppingCartAsync(item.Id, customerId);
    }

    private int GetItemsBasedOnQuantity() {
        return orderService.ShoppingCart.FinalQuantity;
    }

    /*
     * Method returns the total of the shopping cart, but not the shipping rate
     * Yes, we need 2 methods :)
     */

    private decimal GetFinalPrice() {
        return orderService.ShoppingCart.Total;
    }

    /*
     * Method returns the total of the shopping cart plus the shipping rate
     */

    private decimal GetTotalOrderPrice() {
        return orderService.ShoppingCart.TotalOrderPrice;
    }

    private void NavigateToComponent() {
        NavigationManager.NavigateTo("Payout/");
    }

}